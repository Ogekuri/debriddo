name: Release
  
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # Nome del repository GitHub (user/repo)

on:
  push:
    tags:
      - 'v*' # Attiva il workflow per qualsiasi tag che inizia con "v"

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # Permessi per caricare pacchetti
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          tag_name: ${{ github.ref_name }} # Nome del tag
          name: Release ${{ github.ref_name }}  # Nome della release
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download auto-generated ZIP
        run: curl -L -o ${{ github.ref_name }}.zip https://github.com/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.zip

      - name: Set repository name as output
        id: repo_name
        run: |
          REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV

      - name: Upload Asset on Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.ref_name }}.zip
          asset_name: ${{ env.repo_name }}_${{ github.ref_name }}.zip
          asset_content_type: application/zip
        env:                                         # Se il GITHUB_TOKEN non funziona, puoi utilizzare un Personal Access Token (PAT) con i permessi adeguati.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Un PAT puÃ² essere utilizzato al posto di GITHUB_TOKEN
                                                     # Usa il PAT come token, scade il 26/11/2025

      # repository name must be lowercase => Ogekuri -> ogekuri
      - name: Convert repository name to lowercase
        run: |
          echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:latest
          labels: ${{ steps.meta.outputs.labels }}
        env:
          DOCKER_CLI_EXPERIMENTAL: 'true'


      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Notify success
        run: echo "Release created!"
